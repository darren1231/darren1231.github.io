<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://darren1231.github.io/atom.xml" rel="self"/>
  <link href="http://darren1231.github.io/"/>
  <updated>2020-05-10T22:38:42+08:00</updated>
  <id>http://darren1231.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSD(2) Bounding-Box Regression]]></title>
    <link href="http://darren1231.github.io/blog/2020/05/10/ssd-2/"/>
    <updated>2020-05-10T22:19:22+08:00</updated>
    <id>http://darren1231.github.io/blog/2020/05/10/ssd-2</id>
    <content type="html"><![CDATA[<p>以往我們對神經網路的概念都只是侷限在於輸入一張圖片然後對輸出做分類的動作，就像圖左邊的概念圖一樣，假設輸入的這張圖片是貓，那麼就會根據設定給出對應的學習輸出，在學術上我們稱作label，那麼未來在給定一張網路未曾見過的圖片時，若第一顆神經元的輸出數字很大，代表網路判定這張圖片有很高的機率為貓，這就是傳統的分類機器學習，學術上稱做classification。隨著研究的不斷發展，科學家們發現網路不單單只能做分類，還能做到更進階的物件定位，即在圖上把對應的物件以一個矩形框出對應的位置，學術上稱作localization，那麼學習的輸出應該給定什麼呢?很簡單，定義一個矩形就只要四個參數就可以決定了，分別是物件座標中心(X,Y)、物件的寬(W)、物件的高(H)，但是一張圖的物件數量是未知的，若我們很確定未來預測的每張圖片都只有兩個物件，那麼輸出就只要設定成8顆神經元即可</p>

<p><img src="https://i.imgur.com/i8qhp3Q.png" alt="" /></p>

<p>但實際情況可不是這樣，每張圖片的物件數量不定，怎麼解決這個問題呢?科學家想出一個很棒的辦法，即利用特定設計的default box來做回歸學習，學術上也稱作anchor，假設anchor的位置和物件真實的位置(ground truth)很接近，那麼就會把學習偵測此物件的工作交由給此anchor學習，如此的動作在學術上稱做Bounding-Box regression</p>

<p><img src="https://i.imgur.com/E8QtCfA.png" alt="" /></p>

<p>既然要把某個真實物件的座標(ground truth)交由特定的anchor學習，聰明的科學家們就設定出一套定義兩者之間的轉換公式，讓網路學習並定出相對定的label，在學術上稱做encode，而對於已經學習好的網路，拿到輸出並解析出在圖上真正位置稱為decode</p>

<h2 id="encode">encode</h2>
<p>論文上的encode 公式定義如下</p>

<p><img src="https://i.imgur.com/IWl2pYy.png" alt="" /></p>

<p>底下是各個參數對應名稱:</p>

<p>$cx$:代表物體中心的x座標</p>

<p>$g$:代表ground truth box</p>

<p>$d$:代表defaut box</p>

<p>$i$:是default box的索引</p>

<p>$j$:是ground truth box的索引</p>

<p>$\hat g^{cx}_j$:代表ground truth box中心點的x座標和defaut box中心點x座標相減並除以defaut box的寬</p>

<p>$\hat g^{cy}_j$:代表ground truth box中心點的y座標和defaut box中心點y座標相減並除以defaut box的高</p>

<p>$\hat g^{w}_j$:將ground truth box的寬除以defaut box的寬並取log</p>

<p>$\hat g^{h}_j$:將ground truth box的高除以defaut box的高並取log</p>

<p>$m$:是個集合，由四個元素組成，分別是cx,cy,w,h</p>

<p>$l^m_i$:代表由網路預測出第i個defaut box的值</p>

<p>別被複雜的公式嚇跑了，其實白話文來說就是:</p>

<p>$\hat g^{cx}_j=$ (ground truth中心點座標X-anchor中心點座標X)/anchor的寬</p>

<p>$\hat g^{cy}_j=$ (ground truth中心點座標Y-anchor中心點座標Y)/anchor的高</p>

<p>$\hat g^{w}_j=$ log(ground truth的寬/anchor的寬)</p>

<p>$\hat g^{h}_j=$ log(ground truth的高/anchor的高)</p>

<p>因此，encode後的數字就是網路要學習的label，我們希望網路學習後的結果能夠和這label越接近越好</p>

<p><img src="https://i.imgur.com/QZ2YapB.png" alt="" /></p>

<p>而上述的圖片只是示意圖，代表只有一個anchor在學習，實際上使用會從各層抽出特徵圖出來，然後往後接出各層的anchor，因此會有數千個不等的anchor在學習，取決於網路的設置，像下圖所示的，每個點有3個anchor在學習，總共有25個點，因此這層的anchor總數就是75個</p>

<p><img src="https://i.imgur.com/A420IIx.png" alt="" /></p>

<p><a href="https://i.imgur.com/BJahNZK.png"></a></p>

<p>而實際上訓練的時候還會把encode後的值再乘上某個參數，按照y、x、w、h的參數順序分別是[10.0, 10.0, 5.0, 5.0]，底下為encode完整程式碼</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># https://github.com/tensorflow/models/blob/master/research/object_detection/box_coders/faster_rcnn_box_coder.py
</span><span class="line">self._scale_factors = [10.0, 10.0, 5.0, 5.0]
</span><span class="line">def _encode(self, boxes, anchors):
</span><span class="line">    """Encode a box collection with respect to anchor collection.
</span><span class="line">    Args:
</span><span class="line">      boxes: BoxList holding N boxes to be encoded.
</span><span class="line">      anchors: BoxList of anchors.
</span><span class="line">    Returns:
</span><span class="line">      a tensor representing N anchor-encoded boxes of the format
</span><span class="line">      [ty, tx, th, tw].
</span><span class="line">    """
</span><span class="line">    # Convert anchors to the center coordinate representation.
</span><span class="line">    ycenter_a, xcenter_a, ha, wa = anchors.get_center_coordinates_and_sizes()
</span><span class="line">    ycenter, xcenter, h, w = boxes.get_center_coordinates_and_sizes()
</span><span class="line">    # Avoid NaN in division and log below.
</span><span class="line">    ha += EPSILON
</span><span class="line">    wa += EPSILON
</span><span class="line">    h += EPSILON
</span><span class="line">    w += EPSILON
</span><span class="line">
</span><span class="line">    tx = (xcenter - xcenter_a) / wa
</span><span class="line">    ty = (ycenter - ycenter_a) / ha
</span><span class="line">    tw = tf.log(w / wa)
</span><span class="line">    th = tf.log(h / ha)
</span><span class="line">    # Scales location targets as used in paper for joint training.
</span><span class="line">    if self._scale_factors:
</span><span class="line">      ty *= self._scale_factors[0]
</span><span class="line">      tx *= self._scale_factors[1]
</span><span class="line">      th *= self._scale_factors[2]
</span><span class="line">      tw *= self._scale_factors[3]
</span><span class="line">    return tf.transpose(tf.stack([ty, tx, th, tw]))</span></code></pre></td></tr></table></div></figure>

<h2 id="decode">decode</h2>
<p>decode的公式即把公式回推，白話文解釋為</p>

<p>ground truth中心點座標X = (anchor的寬 X 網路輸出中心點座標X)+anchor中心點座標X</p>

<p>ground truth中心點座標Y = (anchor的高 X 網路輸出中心點座標Y)+anchor中心點座標Y</p>

<p>ground truth的寬 =  e^(網路輸出的寬) X anchor的寬</p>

<p>ground truth的高 = e^(網路輸出的高) X anchor的高</p>

<p>由於encode的時候有乘上固定參數，因此decode的時候就必須要把參數除回來，因此，完整decode程式碼如下:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># https://github.com/tensorflow/models/blob/master/research/object_detection/box_coders/faster_rcnn_box_coder.py
</span><span class="line">self._scale_factors = [10.0, 10.0, 5.0, 5.0]
</span><span class="line">def _decode(self, rel_codes, anchors):
</span><span class="line">    """Decode relative codes to boxes.
</span><span class="line">    Args:
</span><span class="line">      rel_codes: a tensor representing N anchor-encoded boxes.
</span><span class="line">      anchors: BoxList of anchors.
</span><span class="line">    Returns:
</span><span class="line">      boxes: BoxList holding N bounding boxes.
</span><span class="line">    """
</span><span class="line">    ycenter_a, xcenter_a, ha, wa = anchors.get_center_coordinates_and_sizes()
</span><span class="line">
</span><span class="line">    ty, tx, th, tw = tf.unstack(tf.transpose(rel_codes))
</span><span class="line">    if self._scale_factors:
</span><span class="line">      ty /= self._scale_factors[0]
</span><span class="line">      tx /= self._scale_factors[1]
</span><span class="line">      th /= self._scale_factors[2]
</span><span class="line">      tw /= self._scale_factors[3]
</span><span class="line">    w = tf.exp(tw) * wa
</span><span class="line">    h = tf.exp(th) * ha
</span><span class="line">    ycenter = ty * ha + ycenter_a
</span><span class="line">    xcenter = tx * wa + xcenter_a
</span><span class="line">    ymin = ycenter - h / 2.
</span><span class="line">    xmin = xcenter - w / 2.
</span><span class="line">    ymax = ycenter + h / 2.
</span><span class="line">    xmax = xcenter + w / 2.
</span><span class="line">    return box_list.BoxList(tf.transpose(tf.stack([ymin, xmin, ymax, xmax])))</span></code></pre></td></tr></table></div></figure>

<p>decode 完成後會在圖上出現大大小小的bounding box以及對應的分類分數，總數根據設計而定，但實際應用的時候不可能把全部的box都畫出來，我們會把分數較高的排在前面，分數低的排在後面，然後設定一個閥值，只把分數大於閥值的box畫出來，因此最後網路呈現的結果就會類似如下:</p>

<p><img src="https://i.imgur.com/dgj2cjS.png" alt="" /></p>

<p>最後再經由一個演算法，學術上稱做NMS(Non-Maximum Suppression)，就可以把一些重複性大的box濾掉，因此最後呈現的就是類似下面這張圖。這整個過程就稱為object detection，各位常看到的人臉定位就是object detection的其中一個應用</p>

<p><img src="https://i.imgur.com/qWqnP0A.png" alt="" /></p>

<p>參考資料:
https://mingming97.github.io/2018/10/21/SSD/</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSD(1):Single Shot Multibox Detector]]></title>
    <link href="http://darren1231.github.io/blog/2020/04/26/ssd-1/"/>
    <updated>2020-04-26T11:50:30+08:00</updated>
    <id>http://darren1231.github.io/blog/2020/04/26/ssd-1</id>
    <content type="html"><![CDATA[<p>剛開始什麼都不太懂，直接就把論文載下來看，看完腦袋滿是問號，因為論文中很多概念都是繼承其他論文的研究，所以很多細節概念並沒有講得特別清晰，後來看到一個SSD教學的投影片，雖然全部內容都是俄文，但投影片的圖就足夠讓我們清楚的了解SSD的整個大架構原理，因此很多圖都是截自這個影片的。底下有附上這投影片的連結，有興趣的朋友可以點擊觀看</p>

<p><a href="https://www.youtube.com/watch?v=P8e-G-Mhx4k&amp;t=3s">SSD: Single Shot MultiBox Detector (How it works)</a></p>

<p><img src="https://i.imgur.com/kUu8wpR.png" alt="" /></p>

<h2 id="abstract">abstract:</h2>
<p>SSD是當今最快的object detection算法，兼具了YOLO的速度與FasterRCNN的準度，本篇論文的最大特點是改進了YOLO只用最後一層來檢測目標而SSD運用多層feature map來做檢測，既兼顧大目標物體檢測亦提升小目標物體檢測的精度。本論文將YOLO在PASCAL VOC 2007 test的檢測精度由63.4%提升到74.3%，速度也從45FPS進展到59FPS(論文中闡述與圖中不同)，此外，如果採用512*512的大圖片訓練的話，精度甚至可高達81.6%。</p>

<h2 id="main">Main:</h2>
<p>下面圖解說明YOLO與SSD的不同點:
YOLO 是以最後一層全連接層來做box regression的動作，而SSD是結合各層的卷積網路來做box regression
YOLO:</p>

<p><img src="https://i.imgur.com/xRLiOQP.png" alt="" /></p>

<p>SSD:
本文以VGG當作基礎網路做了相關實驗，實際上SSD可以接在任何現有的網路後面，如下圖所示的，它是很多Detector組成的卷積網路</p>

<p><img src="https://i.imgur.com/q1iet4G.png" alt="" /></p>

<p>底下附上程式原始碼方便比較，原始碼來源如下:
<a href="https://github.com/balancap/SSD-Tensorflow">Tensorflow-SSD code</a></p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># Original VGG-16 blocks.
</span><span class="line">net = slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')
</span><span class="line">end_points['block1'] = net
</span><span class="line">net = slim.max_pool2d(net, [2, 2], scope='pool1')
</span><span class="line"># Block 2.
</span><span class="line">net = slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')
</span><span class="line">end_points['block2'] = net
</span><span class="line">net = slim.max_pool2d(net, [2, 2], scope='pool2')
</span><span class="line"># Block 3.
</span><span class="line">net = slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')
</span><span class="line">end_points['block3'] = net
</span><span class="line">net = slim.max_pool2d(net, [2, 2], scope='pool3')
</span><span class="line"># Block 4.
</span><span class="line">net = slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')
</span><span class="line">end_points['block4'] = net
</span><span class="line">net = slim.max_pool2d(net, [2, 2], scope='pool4')
</span><span class="line"># Block 5.
</span><span class="line">net = slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')
</span><span class="line">end_points['block5'] = net
</span><span class="line">net = slim.max_pool2d(net, [3, 3], 1, scope='pool5')#max pool</span></code></pre></td></tr></table></div></figure>

<p>下圖將第四個Detector拆開來，以便了解內部構造，如圖所示，輸入是個5X5X256的卷積特徵圖，而輸出是兩個卷積層，一個輸出形狀為5X5X12，用來預測每個box的四個座標，而每個位置可以自由地設定要幾個default box，像這例子就代表每個位置有三個不同比例的default box，因此輸出設計成12(3X4)，另一個輸出形狀為5X5X63，代表每個default box需要21個分類，因此輸出設計成63(CX3)，在這裡C為21(其中一類為背景類，因此在這裡的分類有20種)。</p>

<p><img src="https://i.imgur.com/OpT13zi.png" alt="" /></p>

<p>每個feature map分成25個位置當作中心點擺3個default box，因此總共有75個default box出現在這層</p>

<p><img src="https://i.imgur.com/VDeLk1R.png" alt="" /></p>

<p>box預測如中間的紅色小框框所示，深度為4，每一層各存不同的資訊，分別是中心點的座標x,y，以及其寬和高w,h，右邊的小紅框框也是同樣的道理，分別是20種類別再加上一個背景類別</p>

<p><img src="https://i.imgur.com/Dh6eeX0.png" alt="" /></p>

<p>每一層的default box皆不同，將所有box集合起來就可以得到7308個default box</p>

<p><img src="https://i.imgur.com/wPRiIAO.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batchnorm2conv]]></title>
    <link href="http://darren1231.github.io/blog/2020/04/19/batchnorm2conv/"/>
    <updated>2020-04-19T23:21:10+08:00</updated>
    <id>http://darren1231.github.io/blog/2020/04/19/batchnorm2conv</id>
    <content type="html"><![CDATA[<h1 id="batchnorm-conv">融合batchnorm 至conv中</h1>

<p>最近在將模型轉換成嵌入式裝置可以使用的模型時，發現很多人都會將batchnorm層溶入到卷積層中做運算，剛開始看程式都看不太懂，後來查詢了一些資料再自己推導一次，發現是很簡單的數學運算，覺得很有趣，特地記錄下來學習學習~~</p>

<h2 id="section">公式運算:</h2>

<p>原本的卷積核公式為</p>

<p><img src="https://i.imgur.com/TqGySUA.png" alt="" /></p>

<p>原本的batch_norm的公式為:</p>

<p><img src="https://i.imgur.com/BS3sqH3.png" alt="" /></p>

<p>如今要把batchnorm與卷積核融合成為同一個卷積核，也就是說要計算出一個新的權重w’與b’，如下列公式所示</p>

<p><img src="https://i.imgur.com/bcjP84O.png" alt="" /></p>

<p>再來就是公式推導了，首先將Z取代為wx+b然後代入</p>

<p><img src="https://i.imgur.com/XSOTM2s.png" alt="" /></p>

<p>之後移項推一推就可以得出下列式子</p>

<p><img src="https://i.imgur.com/ZB1HY0y.png" alt="" /></p>

<p>對照一下可以發現出新的w’與新的b’對照如下:</p>

<p><img src="https://i.imgur.com/1heO534.png" alt="" /></p>

<h2 id="caffe">程式碼實現(caffe)</h2>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class=""><span class="line">## load weights
</span><span class="line">mean = bn[0].data
</span><span class="line">var = bn[1].data
</span><span class="line">scalef = bn[2].data
</span><span class="line">
</span><span class="line"># process scale
</span><span class="line">scales = scale[0].data
</span><span class="line">shift = scale[1].data
</span><span class="line">
</span><span class="line">if scalef != 0:
</span><span class="line">    scalef = 1. / scalef
</span><span class="line">mean = mean * scalef
</span><span class="line">var = var * scalef
</span><span class="line">
</span><span class="line">## process variance
</span><span class="line">rstd = 1. / np.sqrt(var + 1e-5)
</span><span class="line">                
</span><span class="line">## caculate conv   
</span><span class="line">rstd1 = rstd.reshape((channels,1,1,1))
</span><span class="line">scales1 = scales.reshape((channels,1,1,1))
</span><span class="line">wt = wt * rstd1 * scales1
</span><span class="line">
</span><span class="line">## caculate bias
</span><span class="line">bias = (bias - mean) * rstd * scales + shift
</span><span class="line">
</span><span class="line">
</span><span class="line">## set nobn weights and bias
</span><span class="line">nobn.params[key][0].data[...] = wt
</span><span class="line">nobn.params[key][1].data[...] = bias</span></code></pre></td></tr></table></div></figure>

<h2 id="section-1">參考資料:</h2>
<p>https://github.com/chuanqi305/MobileNet-SSD/blob/master/merge_bn.py
https://www.itread01.com/content/1556626925.html
https://stackoverflow.com/questions/49536856/tensorflow-how-to-merge-batchnorm-into-convolution-for-faster-inference
https://ithelp.ithome.com.tw/articles/10225171</p>

<h6 id="tags-learning-report">tags: <code>learning report</code></h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[類神經網路筆記]]></title>
    <link href="http://darren1231.github.io/blog/2020/02/01/backpropagation/"/>
    <updated>2020-02-01T15:51:57+08:00</updated>
    <id>http://darren1231.github.io/blog/2020/02/01/backpropagation</id>
    <content type="html"><![CDATA[<h2 id="section">一.前言</h2>

<p>小編看了很多的書籍介紹類神經的，發現這本講的最淺顯易懂而且還附有程式碼，我認為電腦科學與其他物理學、電磁學…等最不同的點在於他是可以看出效果的，是感覺的到的，就算不太懂他的數學原理，反覆地去看程式碼再回來對照公式很快就可以更深入的了解，但是類似電磁學那種理論，即使你經由公式算出了電場是多少，電荷是多少，我依然沒有什麼感覺因為他看不到也摸不到，但電腦科學就不同了，你可以經由寫程式透過軟體去驗證你的理論正不正確，下面就帶各位一步一步地進入類神經的科學理論以及用個實際的例子說明這理論要如何使用。</p>

<p><img src="https://i.imgur.com/gfzFe2N.png" alt="" /></p>

<p>類神經網路與模糊控制理論入門與應用(附範例程式光碟片)</p>

<h2 id="section-1">二.類神經生物模型</h2>

<p>當今最神秘的器官不外乎就是我們人類的大腦，就算在21世紀的今日我們還是對大腦還是有許多不解的地方，因此許多科學家就想解開大腦的奧秘，當中一些電腦科學家就想把腦神經的運作原理透過數學的方式推導出一套可行的演算法出來，因此第一代類神經就這樣產生了。</p>

<ul>
  <li>下圖為一個典型的類神經圖解，人的腦神經系統分為下面幾個構造:</li>
</ul>

<p><img src="https://i.imgur.com/hDbP2li.png" alt="" /></p>

<p>圖 １‑1</p>

<p>圖1中繪有兩個神經細胞，每個神經細胞主要由：（1）神經細胞核（Soma）、（2）神經軸（Axon）、（3）神經樹（Dendrites）、（4）神經節（Synapses）等四部分構成。底下，我們依序介紹此四部份。</p>

<ul>
  <li>神經細胞核（Soma）</li>
</ul>

<p>它是神經細胞的中心體，它的作用，目前並沒有完全徹底的了解，大概是將神經樹收集到的信號，在此作加總後再作一次非線性轉換，再由神經軸將信號傳送到其它的神經細胞中。</p>

<ul>
  <li>神經軸（Axon）</li>
</ul>

<p>連接在神經細胞核上，用來傳送由神經細胞核產生的信號至其它的神經細胞中。</p>

<ul>
  <li>神經樹（Dendrites）</li>
</ul>

<p>神經樹分為兩種：輸入神經樹及輸出神經樹。在圖1中左邊接到神經核的神經樹是用來接收其他神經細胞傳來的信號，稱為輸入神經樹。而在圖1右側接到神經軸的神經樹是用來傳送信號至其它神經細胞，稱為輸出神經樹。所以我們可以說：神經樹是神經細胞呈樹枝狀的輸出入機構。</p>

<ul>
  <li>神經節（Synapse）</li>
</ul>

<p>輸入神經樹和輸出神經樹相連接的點稱為神經節，如圖1中以小圓圈框起來的接點即是。每個神經細胞大約有1000個神經節。神經節是神經網路上的記憶體，它表示兩個神經細胞間的聯結強度，我們將此聯結強度以一個數值來表示，並稱之為加權值（weight）。</p>

<p>一般言之，當神經網路在進行學習時，外界刺激神經細胞所產生的電流會去改變神經節上的加權值，在學習過程中，外界刺激所產生的電流反覆在神經網路上流動，神經節上的加權值也反覆地改變，最後會慢慢的趨向穩定，此時即表示學習已告完成。若神經網路是處於認知或辨識的過程中，由外界刺激所產生的電流，在進入神經網路後，會與貯存在神經節上的加權值作簡單的運算處理，若處理後的信號為可辨識的信號，則外界事物便是神經網路可認知或辨識的的事物了。</p>

<h2 id="section-2">三.類神經人工神經元模型</h2>

<p>了解了生物神經細胞模型後，我們將介紹如何以人工神經元來模仿生物神經細胞。</p>

<p>讓我們再把相關的知識作個簡單的陳述，請參考圖1，當神經細胞透過輸入神經樹由其它神經細胞輸入脈波訊號後，經過神經細胞核的處理，其處理大約是將收集到的訊號作加總，再作一次非線性轉換後，產生一個新的脈波信號，如果這個訊號夠強，則新的脈波信號會由神經軸傳送到輸出神經樹，再透過神經節將此訊號傳給其它神經細胞。值得注意的是：當訊號經過神經節後，由於神經節加權值的影響，其訊號大小值會改變。經由上述的說明，我們提出人工神經元的模型如圖2所示。</p>

<p><img src="https://i.imgur.com/jfV2Ke8.png" alt="" /></p>

<p>圖 ２‑1</p>

<p>在圖2中，每一個人工神經元皆有多個輸入χ1, χ2, …, χn及一個輸出y，輸入值與輸出值的關係式，一般可用輸入值的加權乘積和的函數來表示，即</p>

<script type="math/tex; mode=display">y\left( t \right) = f\lbrack\sum_{i = 1}^{n}{W_{i}*X_{i}\left( t \right) - \theta\rbrack}</script>

<p>其中</p>

<p>ｗi  = 模仿生物神經細胞的神經節加權值。</p>

<p>θ  = 模仿生物神經細胞的細胞核偏權值（bias），即輸入訊號的加權乘積和必須要大</p>

<p>於偏權值後，才能被傳輸至其它人工神經元中。</p>

<p>f（θ） = 模仿生物神經細胞的細胞核非線性轉換函數。</p>

<p>t = 時間。</p>

<p>n = 人工神經元輸入數目。</p>

<p>常用的非線性轉換函數</p>

<p>Sigmoid</p>

<p><img src="https://i.imgur.com/Yi30lLE.png" alt="" /></p>

<p>圖 ３‑1</p>

<p>Tanh</p>

<p><img src="https://i.imgur.com/bw6sDzG.png" alt="" /></p>

<p>圖 ３‑2</p>

<p>ReLU</p>

<p><img src="https://i.imgur.com/KgP0SuQ.png" alt="" /></p>

<p>圖 ３‑3</p>

<p>Leaky ReLU</p>

<p><img src="https://i.imgur.com/NxdTgLs.png" alt="" /></p>

<p>圖 ３‑4</p>

<h2 id="perceptron">四.單層感知機(perceptron)</h2>

<p>此種類神經網路是經由F.Rosenblatt在1957年所提出，為最簡單形式的前饋神經網路，是一種二元線性分類器，當初他之所以會提出此種網路，是希望以此網路來模仿動物的大腦及視覺系統。雖然最初被認為有著良好的發展潛能，但感知機最終被證明不能處理諸多的模式識別問題。1969年，人工智慧支父Marvin Minsky和Seymour Papert在《Perceptrons》書中，仔細分析了以感知機為代表的單層神經網絡系統的功能及局限，證明感知機不能解決簡單的XOR等線性不可分問題。</p>

<p><img src="https://i.imgur.com/y0BeBye.png" alt="" /></p>

<p>圖 ４‑1</p>

<p>單層感知機的數學模型如圖4-1所示，其中ai表示網路的輸入信號，Wi表示網路的加權值，θ 為網路的偏權值，而其輸出方程式為:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
Y = \left\{ \begin{matrix} 1,\text{if}\sum_{i}^{}{a_{i}W_{i} \geq \theta} \\ 0,\text{if}\sum_{i}^{}{a_{i}W_{i} < \theta} \\ \end{matrix} \right.\ %]]&gt;</script>

<p>因此轉換函數為Step function</p>

<p><img src="https://i.imgur.com/lHq937v.png" alt="" /></p>

<p>圖 ４‑2</p>

<p>單層感知機早期應用在印刷字體的識別，如果輸入樣本是線性可分的，那麼單層感知機便可以成功地做分類，如以下例子。底下我們實現一個AND邏輯閘的單層感知機，我們將網路加權值設為 W1=1，W2=1，θ=1.5。</p>

<p><img src="https://i.imgur.com/2fYNyD2.png" alt="" /></p>

<p>圖 ４‑3</p>

<p>我們簡單的套用真質表來檢視這組參數，首先測試第一組X1=0,X2=0，代入公式後呈現</p>

<p>X1W1 + X2W2 − θ = −1.5 &lt; 0</p>

<p>Fstep(−1.5)=0</p>

<p>繼續測試第二組 X1=1,X2=1，代入公式後呈現</p>

<p>X1W1 + X2W2 − θ = 0.5 &gt; 0</p>

<p>Fstep(0.5)=1</p>

<p>各位可以繼續的測試其他兩樣，做出來也都是同樣符合真質表的描述，如果以X軸當資料X1，Y軸當作資料X2畫圖出來的話，可以發現我們所設的參數所描述的就是一條直線方程式，所以只要是畫在平面圖上且資料呈現線性可分特性，用感知機就能學出來。</p>

<p><img src="https://i.imgur.com/tH3zh83.png" alt="" /></p>

<p>圖 ４‑4</p>

<p>讓我們再來看一個例子，我們來找可以使得感知機可以解決Xor邏輯閘的參數。</p>

<p>根據第一組資料，我們可以推導出式子如下，因此θ &gt; 0</p>

<p>X1 = 0, X2 = 0 → X1W1 + X2W2 = 0 &lt; θ ( ３-4‑1)</p>

<p>再根據第二組資料，推出W2 &gt; θ</p>

<p>X1 = 0, X2 = 1 → X1W1 + X2W2 = W2 &gt; θ ( ４‑2)</p>

<p>繼續第三組資料，推出W1 &gt; θ</p>

<p>X1 = 1, X2 = 0 → X1W1 + X2W2 = W1 &gt; θ ( ４‑3)</p>

<p>最後一組推出 W1 + W2 &lt; θ</p>

<p>X1 = 1, X2 = 1 → X1W1 + X2W2 = W1 + W2 &lt; θ ( ４‑4)</p>

<p>由( ３-4‑2) ( ４‑2) ( ４‑3) 我們得知 W1 + W2 &gt; θ ，但是( ４‑4)卻推出W1 + W2 &lt; θ ，因此我們無法找到一組解使得單層感知機解決 Xor 問題，所以從此第一代類神經走入第一個寒冬中，因為它連Xor這麼簡單的問題都解決不了。</p>

<p><img src="https://i.imgur.com/BPtTtku.png" alt="" /></p>

<p>圖 ４‑5 圖 ４‑6</p>

<h2 id="section-3">五.加入隱藏層的感知機</h2>

<p>雖然單層感知機無法解決Xor問題，但是有科學家後續發現加入一個隱藏單元就可以順利排除這困難，原因是加入一個隱藏單元及等於是增加了一維變數，它會形成類似如圖4-5的橢圓曲線來做分類。一個可行的網路架構如圖5-1所示，它的輸出方程式為</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
y^{'} = \left\{ \begin{matrix} 1,\ \ \ \ if\ X_{1} + X_{2} > 1.5 \\ 0,\ \ \ if\ X_{1} + X_{2} < 1.5 \\ \end{matrix} \right.\ %]]&gt;</script>

<script type="math/tex; mode=display">y = \left\{ \begin{matrix} 1,\ \ \ if\ X_{1} + X_{2} - 2y' > 0.5\ \\ 0,\ \ \ if\ X_{1} + X_{2} - 2y^{'} \leq 0.5 \\ \end{matrix} \right.\</script>

<p>我們仿造剛剛的運算，繼續將第一組數據帶入驗證測試，第一科神經元為</p>

<p>X1 = 0, X2 = 0 → X1W11 + X2W21 − θ1 = −1.5 &lt; 0 → y′ = 0</p>

<p>X1W12 + X2W22 − 2y′ − θ2 = −0.5 &lt; 0 → y = 0</p>

<p>第二組數據為X1 = 0, X2 = 1，第一二科神經元為</p>

<p>X1 = 0, X2 = 1 → X1W11 + X2W21 − θ1 = −0.5 &lt; 0 → y′ = 0</p>

<p>X1W12 + X2W22 − 2y′ − θ2 = 0.5 &gt; 0 → y = 1</p>

<p>第三組</p>

<p>X1 = 1, X2 = 0 → X1W11 + X2W21 − θ1 = −0.5 &lt; 0 → y′ = 0</p>

<p>X1W12 + X2W22 − 2y′ − θ2 = 0.5 &gt; 0 → y = 1</p>

<p>第四組</p>

<p>X1 = 1, X2 = 1 → X1W11 + X2W21 − θ1 = 0.5 &gt; 0 → y′ = 1</p>

<p>X1W1 + X22W22 − 2y′ − θ2 = −0.5 &lt; 0 → y = 0</p>

<p><img src="https://i.imgur.com/h1eauzN.png" alt="" /></p>

<p>圖 ５‑1</p>

<p>我們可以將上列方程式簡單的用 Matlab 跑圖驗證一下，可以發現產生如圖5-2 的效果，紅色代表輸出為1，藍色代表輸出為0，多加了一顆隱藏神經元就會產生另一條直線來畫分。</p>

<p><img src="https://i.imgur.com/fDk8I4g.jpg" alt="" /></p>

<p>圖 ５‑2</p>

<p>後續的研究人員重複著類似的實驗，並把神經元做多項的變化，比較加一層以及加兩層神經元的效果圖，可以統計出一張圖表如下(摘自書中)，他們發現神經元加越多層或是神經元加越多顆，所能區分的圖形就更複雜、圖形就更佳多樣化。</p>

<p><img src="https://i.imgur.com/PLVor5S.png" alt="" /></p>

<p>圖 ５‑3</p>

<h2 id="section-4">六.倒傳遞神經網路</h2>

<p>倒傳遞神經網路(Back-propagation Neural Network) 是一種具有學習能力的多層前授型網路。此網路是由 Rumelhart、Mcclelland在1985年所提出的，當初他們之所以會提出此種網路，是希望提出一種平行分布訊息的處理方法來探索人類認知的微結構。</p>

<p><img src="https://i.imgur.com/wfUhq4z.png" alt="" /></p>

<p>圖 ６‑1</p>

<ul>
  <li>簡單手算版</li>
</ul>

<p>我找尋許多資料發現大多數講解倒傳遞類神經模型時都是用一堆數學公式，的確，類神經是經由精巧的微積分並運用微積分的連鎖律，一層一層地從後面傳遞誤差回去，因此我們就可以求出神經元權重的改變量，但直接看公式的話會很容易陷入迷思，因此我在網路上找到一份手算倒傳遞網路的資料 [6]，我把它翻譯成中文，相信經過這個例子的說明後再去看公式會容易許多。</p>

<p><img src="https://i.imgur.com/KFUygYU.png" alt="" /></p>

<p>圖 ６‑2</p>

<p>我們先從簡單的模型開始講起，倒傳遞網路的連接方式與perceptron不同，它是採取全部神經元互相連接的方式，但是只有層與層的神經元互相連結，層之間的神經元不做溝通，旁邊的數字代表參數的初始值為了等一下方便計算，這裡的b就是相當於剛剛所講的θ，事實上，大部分類神經書籍文獻都用b表示，只是書中為了與人腦神經元模型相呼應因此改成θ，在這裡我們將b命名為 bias，並將以前的公式改為如下</p>

<script type="math/tex; mode=display">y\left( t \right) = f\lbrack\sum_{i = 1}^{n}{W_{i}*X_{i}\left( t \right) + b\rbrack}</script>

<p>假如我們這裡選的函數f是sigmoid函數，因此，這裡h1的輸出值就為</p>

<script type="math/tex; mode=display">{y_{h1} = f\left( w1*i1 + w2*i2 + b1 \right) = f\left( 0.15*0.05 + 0.2*0.1 + 0.35 \right) = f\left( 0.3825 \right)}</script>

<script type="math/tex; mode=display">{= \frac{1}{1 + e^{- 0.3825}} = 0.6}</script>

<p>用同樣的算法我們可以得出yh2 = 0.596884378</p>

<p>接下來以同樣的方法計算出o1, o2</p>

<p>outo1 = f(h1<em>w5+h2</em>w6+b2) = 0.75</p>

<p>outo2 = f(h1<em>w7+h2</em>w8+b2) = 0.773</p>

<p>這裡要注意的是作者似乎把bias項目簡化了，事實上每科神經元都各自有一個bias，但這裡作者為了計算方便將兩顆神經元的bias都設為一樣。</p>

<p>接下來我們要定義總體誤差為</p>

<script type="math/tex; mode=display">E_{\text{total}} = \Sigma\frac{1}{2}\left( target - output \right)^{2}\</script>

<p>其中target就是我們所想得到的值，整個演算法運作的目的就是想讓我的輸出越接近target越好，平方是為了消除正負號所帶來的影響，0.5是為了後面微分方便，加總是指，假如輸出神經元有N個，那就是代表要將N科神經元的誤差都加總起來，所以類神經訓練到最後Etotal會越來越小，代表神經元的輸出已經和我的樣本資料幾乎一模一樣了。</p>

<p>這裡輸出神經元有兩個，因此</p>

<script type="math/tex; mode=display">{E_{\text{total}} = E_{o1} + E_{o2} = \frac{1}{2}\left( \text{targe}t_{o1} - out_{o1} \right)^{2} + \frac{1}{2}\left( \text{targe}t_{o2} - out_{o2} \right)^{2}}</script>

<script type="math/tex; mode=display">{= \frac{1}{2}\left( 0.01 - 0.75 \right)^{2} + \frac{1}{2}\left( 0.99 - 0.773 \right)^{2} = 0.3}</script>

<p>再來我們要用微積分的連鎖律求出Etotal和w5的關係式，我們想要知道w5該如何調整能使我的Etotal變得更小，因此我們可以求出$\frac{\partial Etotal}{\partial w5}$ ，找出微分關係式後就可以套用底下公式找出調整w5的方向，其中α稱作學習率。</p>

<script type="math/tex; mode=display">w5_{\text{new}} = w5_{\text{old}} - \alpha\frac{\partial Etotal}{\partial w5}</script>

<p>根據微積分連鎖率我們可以得知</p>

<script type="math/tex; mode=display">\frac{\partial Etotal}{\partial w5} = \frac{\partial Etotal}{\partial out_{o1}}*\frac{\partial out_{o1}}{\partial\text{ne}t_{o1}}*\frac{\partial net_{o1}}{\partial w5}</script>

<p>其中neto1指的是f函式中裡面的加總式子，也就是說</p>

<p>neto1 = h1 * w5 + h2 * w6 + b2</p>

<p>接下來就是分別算出各項偏微分，然後再將它們組合起來就可以得到$\frac{\partial Etotal}{\partial w5}$</p>

<p>首先算出第一項$\frac{\partial Etotal}{\partial out_{o1}}$，回想起剛剛定義的Etotal為</p>

<script type="math/tex; mode=display">E_{\text{total}} = \frac{1}{2}\left( \text{targe}t_{o1} - out_{o1} \right)^{2} + \frac{1}{2}\left( \text{targe}t_{o2} - out_{o2} \right)^{2}</script>

<p>因此</p>

<script type="math/tex; mode=display">\frac{\partial Etotal}{\partial out_{o1}} = \frac{1}{2}*2*\left( \text{targe}t_{o1} - out_{o1} \right)* - 1 + 0 = - \left( 0.01 - 0.75 \right) = 0.74</script>

<p>再來計算第二項$\frac{\partial out_{o1}}{\partial net_{o1}}$，回想起剛剛解釋的neto1，因此</p>

<script type="math/tex; mode=display">\text{ou}t_{o1} = \ f\left( \text{ne}t_{o1} \right) = \frac{1}{1 + e^{- net_{o1}}}</script>

<p>所以</p>

<script type="math/tex; mode=display">\frac{\partial out_{o1}}{\partial net_{o1}} = \ \text{ou}t_{o1}*\left( 1 - \text{ou}t_{o1} \right) = 0.75*\left( 1 - 0.75 \right) = 0.186</script>

<p>最後一項$\frac{\partial net_{o1}}{\partial w5}$，因為neto1 = h1 * w5 + h2 * w6 + b2，所以</p>

<script type="math/tex; mode=display">\frac{\partial net_{o1}}{\partial w5} = h1 = 0.6</script>

<p>全部組裝再一起可以得到</p>

<script type="math/tex; mode=display">\frac{\partial Etotal}{\partial w5} = 0.74*0.186*0.6 = 0.082</script>

<p>假設學習率為0.5，因此我們就可以得知</p>

<script type="math/tex; mode=display">w5_{\text{new}} = w5_{\text{old}} - \alpha*\frac{\partial Etotal}{\partial w5} = 0.4 - 0.5*0.082 = 0.359</script>

<p>圖6-3為作者所畫的流程圖，這就是為什麼網路稱為倒傳遞神經網路的原因，從最後一層的Error項傳遞誤差到outo1，然後再到neto1，一直層層傳遞到w5。</p>

<p><img src="https://i.imgur.com/dMIhwux.png" alt="" /></p>

<p>圖 ６‑3</p>

<p>我們可以用同樣的方法算出其他科神經元</p>

<p>w6new = 0.4</p>

<p>w7new = 0.51</p>

<p>w8new = 0.56</p>

<p><img src="https://i.imgur.com/bxwDZLd.png" alt="" /></p>

<p>圖 ６‑4</p>

<p>再來我們要將Error繼續傳遞到 w1，因此我們要算出$\frac{\partial Etotal}{\partial w1}$</p>

<p>我們一樣套用連鎖率概念可以得知</p>

<script type="math/tex; mode=display">\frac{\partial Etotal}{\partial w1} = \frac{\partial Etotal}{\partial\text{ou}t_{h1}}*\frac{\partial out_{h1}}{\partial net_{h1}}*\frac{\partial net_{h1}}{\partial w1}</script>

<p>其中$\frac{\partial Etotal}{\partial out_{h1}}$     為如下，因為改變outh1對後面每一項的誤差皆有影響，因此必須把它們加總起來</p>

<script type="math/tex; mode=display">\frac{\partial Etotal}{\partial out_{h1}} = \frac{\partial E_{o1}}{\partial out_{h1}} + \frac{\partial E_{o2}}{\partial out_{h1}}</script>

<p>我們開始像剛剛一樣逐個計算偏微分項目，從$\frac{\partial E_{o1}}{\partial out_{h1}}$開始，我們可以套用剛剛已經求得的項目</p>

<script type="math/tex; mode=display">\frac{\partial E_{o1}}{\partial out_{h1}} = \frac{\partial E_{o1}}{\partial net_{o1}}*\frac{\partial net_{o1}}{\partial out_{h1}} = \frac{\partial E_{o1}}{\partial out_{o1}}*\frac{\partial out_{o1}}{\partial net_{o1}}*\frac{\partial net_{o1}}{\partial out_{h1}} = 0.74*0.18*\frac{\partial\text{ne}t_{o1}}{\partial out_{h1}}</script>

<p>因為 neto1 = w5 * outh1 + w6 * outh2 + b2 * 1，所以</p>

<script type="math/tex; mode=display">\frac{\partial net_{o1}}{\partial out_{h1}} = w5 = 0.4</script>

<p>組合起來就得到</p>

<script type="math/tex; mode=display">\frac{\partial E_{o1}}{\partial out_{h1}} = 0.74*0.18*0.4 = 0.0554</script>

<p>同樣的程序我們可以得到</p>

<script type="math/tex; mode=display">\frac{\partial E_{o2}}{\partial out_{h1}} = - 0.02</script>

<p>因此</p>

<script type="math/tex; mode=display">\frac{\partial Etotal}{\partial\text{ou}t_{h1}} = 0.0554 - 0.02 = 0.0354</script>

<p>再來繼續算第二項$\frac{\partial out_{h1}}{\partial net_{h1}}$</p>

<p>∵$out_{h1} = \frac{1}{1 + e^{- net_{h1}}}$         </p>

<p>∴$\frac{\partial out_{h1}}{\partial net_{h1}}=out_{h1}*(1-out_{h1})=0.6\times(1-0.6)=0.24$</p>

<p>最後一項$\frac{\partial\text{ne}t_{h1}}{\partial w1}$</p>

<p>∵neth1 = w1 * i1 + w2 * i2 + b1 * 1</p>

<p>∴$\frac{\partial net_{h1}}{\partial w1} = i1 = 0.05$(也就是前一層的輸出)</p>

<p>全部組裝再一起可以得到</p>

<script type="math/tex; mode=display">\frac{\partial Etotal}{\partial w1} = \frac{\partial Etotal}{\partial out_{h1}}*\frac{\partial out_{h1}}{\partial net_{h1}}*\frac{\partial net_{h1}}{\partial w1} = 0.0354*0.24*0.05 = 0.0004248</script>

<p>因此</p>

<p>$w1_{\text{new}}$</p>

<p>$=w1_{old} - \alpha\frac{\partial Etotal}{\partial w1}$</p>

<p>$= 0.15 - 0.5*0.0004248 = 0.1497876$</p>

<p>同樣的也可以找出隱藏層的其他weight出來</p>

<p>w2new = 0.19956143</p>

<p>w3new = 0.24975114</p>

<p>w4new = 0.29950229</p>

<p>有了前面的例子作簡介後，接下來我們要代入公式版的backpropagation推導，如果在公式版的有哪個地方看不懂，請反覆去回顧剛剛講的簡介，如此來回推敲多次相信很快就能理解的。</p>

<ul>
  <li>複雜公式版</li>
</ul>

<p><img src="https://i.imgur.com/WcFveG3.png" alt="" /></p>

<p>圖 ６‑5</p>

<p>$a_{j}^{l} = f(\sum_{k}^{}{w_{\text{jk}}^{l}a_{k}^{l - 1} + b_{j}^{l})} = f(z_{j}^{l})$ ( ６-2‑1)</p>

<p>首先我們先定義各項參數，$a_{j}^{l}$代表在第l層中，第j科神經元的輸出，$w_{\text{jk}}^{l}$代表在模型中第l層和l-1層中的權重值，$b_{j}^{l}$代表在模型中第l層和l-1層中的偏權值，k代表l-1層的神經元索引值。</p>

<p>$E = \frac{1}{2}\sum_{n}^{}\left\lbrack y_{j} - a_{j}^{L} \right\rbrack^{2}$ ( ６-2‑2)</p>

<p>其中，L代表最後一層，$a_{j}^{L}$代表在輸出層中第j科神經元的輸出，$y_j$是代表第j個輸出的樣本，n代表最後一層神經元個數，我們將輸出層所有神經元誤差都加總起來，並加上平方項目以消除正負號所帶來的影響，最後除以2來當作整個神經網路的總體誤差。</p>

<p>我們首先求得總體誤差對輸出層權重質的微分，根據微積分的交換率我們可以改寫如以下公式( ６-2‑3)，我們分別對各個篇微分項做運算得到( ６-2‑4) ( ６-2‑5) ( ６-2‑6)</p>

<p>$\frac{\partial E}{\partial w_{\text{jk}}^{L}} = \frac{\partial E}{\partial a_{j}^{L}}*\frac{\partial a_{j}^{L}}{\partial z_{j}^{L}}\times\frac{\partial z_{j}^{L}}{w_{\text{jk}}^{L}}$ ( ６-2‑3)</p>

<p>$\frac{\partial E}{\partial a_{j}^{L}} = - (y_{j} - a_{j}^{L})$ ( ６-2‑4)</p>

<p>$\frac{\partial a_{j}^{L}}{\partial z_{j}^{L}} = \frac{\partial f\left( z_{j}^{L} \right)}{\partial z_{j}^{L}} = f’(z_{j}^{L})$ ( ６-2‑5)</p>

<p>$\frac{\partial z_{j}^{L}}{\partial w_{jk}^{L}}=\frac{\partial\sum_{k}^{}{w_{\text{jk}}^{L}a_{k}^{L - 1} + b_{j}^{L}}}{\partial w_{jk}^{L}} = a_{k}^{L - 1}$( ６-2‑6)</p>

<p>將( ６-2‑4) ( ６-2‑5) ( ６-2‑6)組裝再一起我們可以得到( ６-2‑8)，其中$δ_j^L$稱作在L層第j顆神經元的敏感度，式子如( ６-2‑9)所示。</p>

<p>$\frac{\partial E}{\partial w_{\text{jk}}^{L}} = a_{k}^{L - 1}\left( a_{j}^{L} - y_{j} \right)f^{‘}\left( z_{j}^{L} \right) = a_{k}^{L - 1}\delta_{j}^{L}$ ( ６-2‑8)</p>

<p>$δ_j^L = (a_j^L−y_j)f′(z_j^L)$ ( ６-2‑9)</p>

<p>再來我們求得總體誤差對隱藏層權重值的偏導數，我們一樣可以按照連鎖律將式子拆成如( ６-2‑10)所示，依照剛剛的方法分別運算可以求得式子( ６-2‑11) ( ６-2‑12) ( ６-2‑13)</p>

<p>$\frac{\partial E}{\partial w_{\text{ki}}^{L - 1}} = \frac{\partial E}{\partial a_{k}^{L - 1}}\times\frac{\partial a_{k}^{L - 1}}{\partial z_{k}^{L - 1}}\times\frac{\partial z_{k}^{L - 1}}{w_{\text{ki}}^{L - 1}}$ ( ６-2‑10)</p>

<p>$\frac{\partial E}{\partial a_{k}^{L - 1}} = \sum_{j}^{}{\frac{\partial E}{\partial a_{j}^{L}}\times\frac{\partial a_{j}^{L}}{\partial z_{j}^{L}}}\times\frac{\partial z_{j}^{L}}{\partial a_{k}^{L - 1}}$ ( ６-2‑11)</p>

<p>$\frac{\partial a_{k}^{L - 1}}{\partial z_{k}^{L - 1}} = f’(z_{k}^{L - 1})$ ( ６-2‑12)</p>

<p>$\frac{\partial z_{k}^{L - 1}}{w_{\text{ki}}^{L - 1}} = a_{i}^{L - 2}$ ( ６-2‑13)</p>

<p>其中( ６-2‑11-1) 為式子( ６-2‑11)中的子項目，( ６-2‑11-1-1)為( ６-2‑11-1)的子項目，( ６-2‑12) ( ６-2‑13)與( ６-2‑5) ( ６-2‑6)算法一樣只是代號變了。</p>

<p>$\frac{\partial E}{\partial a_{k}^{L - 1}} = \sum_{j}^{}{\frac{\partial E}{\partial a_{j}^{L}}}\frac{\partial a_{j}^{L}}{\partial z_{j}^{L}}\frac{\partial z_{j}^{L}}{\partial a_{k}^{L - 1}}\ = \sum_{j}^{}(a_{j}^{L} - y_{j})f’(z_{j}^{L})w_{\text{jk}}^{L}$ ( ６-2‑11-1)</p>

<p>$\frac{\partial z_{j}^{L}}{\partial a_{k}^{L - 1}} = \frac{\partial\sum_{k}^{}{w_{\text{jk}}^{L}a_{k}^{L - 1} + b_{j}^{L}}}{\partial a_{k}^{L - 1}} = w_{\text{jk}}^{L}$ ( ６-2‑11-1-1)</p>

<p>因此我們可以將其組裝再一起寫做( ６-2‑14)，我們可以將後面的項目取代成式子( ６-2‑15)，其中$δ_k^{L − 1}$稱做在L-1層中第K個神經元的敏感度。</p>

<p>$\frac{\partial E}{\partial w_{\text{ki}}^{L - 1}}=a_{i}^{L - 2}f’(z_{k}^{L - 1})\sum_{j}^{}{\frac{\partial E}{\partial a_{j}^{L}}\frac{\partial a_{j}^{L}}{\partial z_{j}^{L}}}\frac{\partial z_{j}^{L}}{\partial a_{k}^{L - 1}}$( ６-2‑14)</p>

<p>$\frac{\partial E}{\partial w_{\text{ki}}^{L - 1}} = a_{i}^{L - 2}\delta_{k}^{L - 1}$ ( ６-2‑15)</p>

<p>因此$δ_k^{L − 1}$如公式( ６-2‑16)所示，我們可以將( ６-2‑9)代入公式( ６-2‑16)得到( ６-2‑17)，這是類神經中很重要的公式，代表前一層的敏感度是後面一層敏感度與權重的加總，然後再對前一層的神經元做輸出函數的微分，不論類神經模型還是深度學習模型都是靠這行重要的公式反覆的把誤差由後面往前傳做運算以求出總體誤差對權重值的偏導量，以得知權重值的改變方向而使得模型中樣本輸出與最後一層神經元輸出值的差距越來越小，進而使的模型具有擬合任意非線性方程式的意義。</p>

<p>$\delta_{k}^{L - 1} = f’(z_{k}^{L - 1})\sum_{j}^{}{(a_{j}^{L} - y_{j})f’(z_{j}^{L})}w_{jk}^{L}$ ( ６-2‑16)</p>

<p>$= f’\left( z_{k}^{L - 1} \right)\sum_{j}^{}{\delta_{j}^{L}w_{\text{jk}}^{L}}$ ( ６-2‑17)</p>

<p>我們接著繼續求總體誤差對偏權值的偏導項( ６-2‑18)，其中前面兩項式子( ６-2‑4) ( ６-2‑5)就已經求過，而最後一項對偏權值的微分項為1，因此可以寫成式子( ６-2‑19)，表示總體誤差對偏權值的微分剛好等於該層神經元的敏感度。</p>

<p>$\frac{\partial E}{\partial b_{j}^{L}} = \frac{\partial E}{\partial a_{j}^{L}}\frac{\partial a_{j}^{L}}{\partial z_{j}^{L}}\frac{\partial z_{j}^{L}}{\partial b_{j}^{L}}$ ( ６-2‑18)</p>

<p>$\frac{\partial E}{\partial b_{j}^{L}} = \left( a_{j}^{L} - y_{j} \right)f’\left( z_{j}^{L} \right) = \delta_{j}^{L}$ ( ６-2‑19)</p>

<p>自此，四大公式已全數求出，分別為如下，我將表示最後一層L的代號用任意層l取代，藉以表達出類神經模型中的通用函式:</p>

<p>$\delta_{j}^{l} = \frac{\partial E}{\partial a_{j}^{L}}\ f’\left( z_{j}^{l} \right)$ (Equation 1)</p>

<p>$\delta_{k}^{l - 1} = f’\left( z_{k}^{l - 1} \right)\sum_{j}^{}{\delta_{j}^{l}w_{\text{jk}}^{l}}$ (Equation 2)</p>

<p>$\frac{\partial E}{\partial w_{\text{jk}}^{l}} = a_{k}^{l - 1}\delta_{j}^{l}$ (Equation 3)</p>

<p>$\frac{\partial E}{\partial b_{j}^{l}} = \delta_{j}^{l}$ (Equation 4)</p>

<p>常見的表示式如下</p>

<p><img src="https://i.imgur.com/qna0kTc.png" alt="" /></p>

<h2 id="section-5">七.參考資料</h2>

<p>類神經網路與模糊控制理論 入門與應用 王進德 編著</p>

<p>http://neuron.csie.ntust.edu.tw/homework/93/NN/homework2/M9304302/welcome.htm</p>

<p>http://iamtrask.github.io/2015/07/12/basic-python-network/</p>

<p>https://en.wikipedia.org/wiki/Hadamard_product_(matrices)</p>

<p>http://neuralnetworksanddeeplearning.com/chap2.html</p>

<p>https://mattmazur.com/2015/03/17/a-step-by-step-backpropagation-example/</p>

<p>http://cs231n.github.io/optimization-2/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在windows系統上用octopress打造自己的部落格]]></title>
    <link href="http://darren1231.github.io/blog/2020/01/19/this-is-the-title/"/>
    <updated>2020-01-19T22:02:26+08:00</updated>
    <id>http://darren1231.github.io/blog/2020/01/19/this-is-the-title</id>
    <content type="html"><![CDATA[<h2 id="section">一.前言</h2>
<p>小編之前一直都是使用匹克幫這種簡單的網站，不用費太多心力，直接剪剪貼貼就可以將圖片以及想要的資訊分享給大家，但使用一段時間後覺得匹克邦的網頁簡潔度、美觀都不如我長期使用的Markdown好用，常常Markdown寫完一篇文章後還要再花費心力整理到匹克幫然後做排版的動作，實在很費功夫，因此決定換個方式架設我的網站，搜尋了一下後發現竟然有可以使用github當成架設網站伺服器的方法，經過幾番摸索後終於架設成功了，底下就紀錄架設順序方便以後複習。</p>

<h2 id="section-1">二.安裝步驟</h2>
<p>底下介紹安裝的方法，首先要安裝ruby 環境以及gem</p>

<h3 id="aruby">a.安裝Ruby環境</h3>

<ul>
  <li>官網:<a href="https://rubyinstaller.org/downloads">https://rubyinstaller.org/downloads</a></li>
</ul>

<p>到上面的官網連結下載</p>

<h4 id="rubyinstaller-233-x64exe">1.rubyinstaller-2.3.3-x64.exe</h4>

<h4 id="devkit-mingw64-64-472-20130224-1432-sfxexe">2.DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe\</h4>

<p>然後點擊安裝rubyinstaller，記得要勾選自動配置環境。</p>

<p><a href="https://i.imgur.com/gnfUvGP.png"></a>
<img src="https://i.imgur.com/3wDNMZH.png" alt="" /></p>

<p>然後點擊安裝Devkit，選擇完解壓縮的位置後開啟命令提示元移動到安裝的資料夾下輸入以下指令</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ruby dk.rb init 
</span><span class="line">ruby dk.rb install</span></code></pre></td></tr></table></div></figure>

<p><img src="https://i.imgur.com/8WsFsxQ.png" alt="" /></p>

<h3 id="bgem">b.更新gem</h3>
<p>安裝完成功後就要輸入以下指令更新gem，可以打gem測試看看有無成功</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem update --system</span></code></pre></td></tr></table></div></figure>
<p><img src="https://i.imgur.com/UntOmd4.png" alt="" /></p>

<p><a href="https://i.imgur.com/VavS8zg.png"></a></p>

<h3 id="cgitoctopress">c.用git拿到octopress資料</h3>
<p>執行這步驟前先要確定電腦已經安裝了git，安裝完後打開git bash　輸入以下指令：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git://github.com/imathis/octopress.git octopress
</span><span class="line">cd octopress
</span><span class="line">gem install bundler
</span><span class="line">bundle install
</span><span class="line">rake install
</span><span class="line">
</span><span class="line"># gem uninstall rake(if you want to delete rake)</span></code></pre></td></tr></table></div></figure>
<p><a href="https://i.imgur.com/MULJVjR.png"></a>
<img src="https://i.imgur.com/pydyfcD.png" alt="" />
<img src="https://i.imgur.com/xokNqkp.png" alt="" /></p>

<h3 id="dgithub">d.設定github的路徑</h3>
<p>這裡會將部落格原始碼連結到您的github帳號底下，沒有github帳好的請去申請一個，之後創造一個名稱為username.github.io的repository(注意：這裡要把username換成您的github帳號名稱)
<img src="https://i.imgur.com/15Xhsl2.png" alt="" /></p>

<p><a href="https://i.imgur.com/we7LvjE.png"></a></p>

<p>之後在git bash視窗下輸入下列程式碼，它會直接跳到下一行等待您輸入github的網域位置</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake setup_github_pages
</span><span class="line">git@github.com:darren1231/darren1231.github.io.git</span></code></pre></td></tr></table></div></figure>
<p><a href="https://i.imgur.com/zQux6dp.png"></a>
<img src="https://i.imgur.com/sZOQZpX.png" alt="" /></p>

<h3 id="erake">e.接下來就可以運用rake指令管理您的部落格了</h3>
<ul>
  <li>建立新文章</li>
</ul>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake new_post["this is the title"]</span></code></pre></td></tr></table></div></figure>
<ul>
  <li>發佈</li>
</ul>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake generate
</span><span class="line">rake deploy</span></code></pre></td></tr></table></div></figure>
<ul>
  <li>預覽
輸入下列程式碼就可以在本地端觀看網頁(在網址列輸入http://127.0.0.1:4000/)</li>
</ul>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake preview</span></code></pre></td></tr></table></div></figure>

<h3 id="fpush-github">f.push 到github上</h3>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git add .
</span><span class="line">git commit -m "first commit"
</span><span class="line">git push origin source</span></code></pre></td></tr></table></div></figure>

<h2 id="section-2">三.增加額外功能</h2>

<h3 id="adisqus-">a.加入disqus 討論區</h3>
<p>修改 _config.yml 內的 # Disqus Comments ，填上在 Disqus 申請的 short name ，並改成 true。</p>

<p><img src="https://i.imgur.com/fprLGrc.png" alt="" /></p>

<h3 id="b">b.加入數學公式</h3>
<ul>
  <li>1.安裝kramdown</li>
</ul>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem install kramdown</span></code></pre></td></tr></table></div></figure>
<ul>
  <li>
    <p>2.修改_config.yml
取代所有rdiscount 關鍵字成kramdown</p>
  </li>
  <li>
    <p>3.修改Gemfile
把gem ‘ridiscount’改成gem ‘kramdown in Gemfile</p>
  </li>
  <li>
    <p>4.添加Mathjax配置</p>
  </li>
</ul>

<p>在source/_includes/custom/head.html 添加以下代碼</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;!-- mathjax config similar to math.stackexchange --&gt;
</span><span class="line">&lt;script type="text/x-mathjax-config"&gt;
</span><span class="line">MathJax.Hub.Config({
</span><span class="line">  jax: ["input/TeX", "output/HTML-CSS"],
</span><span class="line">  tex2jax: {
</span><span class="line">    inlineMath: [ ['$', '$'] ],
</span><span class="line">    displayMath: [ ['$$', '$$']],
</span><span class="line">    processEscapes: true,
</span><span class="line">    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
</span><span class="line">  },
</span><span class="line">  messageStyle: "none",
</span><span class="line">  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
</span><span class="line">});
</span><span class="line">&lt;/script&gt;
</span><span class="line">&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>5.修復Mathjax右擊頁面空白bug</li>
</ul>

<p>修改 sass/base/_theme.scss，並將div 改成 div#main</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  &gt; div#main {
</span><span class="line">     background: $sidebar-bg $noise-bg;
</span><span class="line">     border-bottom: 1px solid $page-border-bottom;
</span><span class="line">     &gt; div {</span></code></pre></td></tr></table></div></figure>
<ul>
  <li>6.測試公式</li>
</ul>

<p>整段LeTex</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$$
</span><span class="line">\begin{align}
</span><span class="line">\mbox{Union: } &amp; A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
</span><span class="line">\mbox{Concatenation: } &amp; A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
</span><span class="line">\mbox{Star: } &amp; A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
</span><span class="line">\end{align}
</span><span class="line">$$</span></code></pre></td></tr></table></div></figure>
<p><script type="math/tex">% &lt;![CDATA[
\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align} %]]&gt;</script></p>

<p>內嵌 LaTex</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">If $a^2=b$ and $b=2$, then the solution must be
</span><span class="line">either $a=+\sqrt{2}$ or $a=-\sqrt{2}$.</span></code></pre></td></tr></table></div></figure>
<p>If $a^2=b$ and $b=2$, then the solution must be
either $a=+\sqrt{2}$ or $a=-\sqrt{2}$.</p>

<h2 id="section-3">四.參考資料</h2>
<ul>
  <li><a href="http://itspg.logdown.com/posts/1701-octopress-on-windows-tutorial">1.http://itspg.logdown.com/posts/1701-octopress-on-windows-tutorial</a></li>
  <li><a href="http://www.yebangyu.org/blog/2015/10/17/howtoinstalloctopress/">2.http://www.yebangyu.org/blog/2015/10/17/howtoinstalloctopress/</a></li>
  <li><a href="https://amos-vwr.blogspot.tw/2013/01/octopress-github.html">3.https://amos-vwr.blogspot.tw/2013/01/octopress-github.html</a></li>
  <li><a href="http://dreamrunner.org/blog/2014/03/09/octopresszhong-shi-yong-latexxie-shu-xue-gong-shi/">4.http://dreamrunner.org/blog/2014/03/09/octopresszhong-shi-yong-latexxie-shu-xue-gong-shi/</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
